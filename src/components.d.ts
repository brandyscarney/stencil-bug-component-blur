/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { RadioGroupCompareFn } from "./components/radio-group/radio-group";
export { RadioGroupCompareFn } from "./components/radio-group/radio-group";
export namespace Components {
    interface IonRadio {
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev?: globalThis.Event) => Promise<void>;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface IonRadioGroup {
        /**
          * If `true`, the radios can be deselected.
         */
        "allowEmptySelection": boolean;
        /**
          * This property allows developers to specify a custom function or property name for comparing objects when determining the selected option in the ion-radio-group. When not specified, the default behavior will use strict equality (===) for comparison.
         */
        "compareWith"?: string | RadioGroupCompareFn | null;
        /**
          * The error text to display at the top of the radio group.
         */
        "errorText"?: string;
        /**
          * The helper text to display at the top of the radio group.
         */
        "helperText"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
}
export interface IonRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIonRadioElement;
}
export interface IonRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIonRadioGroupElement;
}
declare global {
    interface HTMLIonRadioElementEventMap {
        "ionFocus": void;
        "ionBlur": void;
    }
    interface HTMLIonRadioElement extends Components.IonRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIonRadioElementEventMap>(type: K, listener: (this: HTMLIonRadioElement, ev: IonRadioCustomEvent<HTMLIonRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIonRadioElementEventMap>(type: K, listener: (this: HTMLIonRadioElement, ev: IonRadioCustomEvent<HTMLIonRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIonRadioElement: {
        prototype: HTMLIonRadioElement;
        new (): HTMLIonRadioElement;
    };
    interface HTMLIonRadioGroupElementEventMap {
        "ionChange": any;
        "ionValueChange": any;
    }
    interface HTMLIonRadioGroupElement extends Components.IonRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIonRadioGroupElementEventMap>(type: K, listener: (this: HTMLIonRadioGroupElement, ev: IonRadioGroupCustomEvent<HTMLIonRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIonRadioGroupElementEventMap>(type: K, listener: (this: HTMLIonRadioGroupElement, ev: IonRadioGroupCustomEvent<HTMLIonRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIonRadioGroupElement: {
        prototype: HTMLIonRadioGroupElement;
        new (): HTMLIonRadioGroupElement;
    };
    interface HTMLElementTagNameMap {
        "ion-radio": HTMLIonRadioElement;
        "ion-radio-group": HTMLIonRadioGroupElement;
    }
}
declare namespace LocalJSX {
    interface IonRadio {
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the radio button loses focus.
         */
        "onIonBlur"?: (event: IonRadioCustomEvent<void>) => void;
        /**
          * Emitted when the radio button has focus.
         */
        "onIonFocus"?: (event: IonRadioCustomEvent<void>) => void;
        /**
          * the value of the radio.
         */
        "value"?: any | null;
    }
    interface IonRadioGroup {
        /**
          * If `true`, the radios can be deselected.
         */
        "allowEmptySelection"?: boolean;
        /**
          * This property allows developers to specify a custom function or property name for comparing objects when determining the selected option in the ion-radio-group. When not specified, the default behavior will use strict equality (===) for comparison.
         */
        "compareWith"?: string | RadioGroupCompareFn | null;
        /**
          * The error text to display at the top of the radio group.
         */
        "errorText"?: string;
        /**
          * The helper text to display at the top of the radio group.
         */
        "helperText"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.  This event will not emit when programmatically setting the `value` property.
         */
        "onIonChange"?: (event: IonRadioGroupCustomEvent<any>) => void;
        /**
          * Emitted when the `value` property has changed. This is used to ensure that `ion-radio` can respond to any value property changes from the group.
         */
        "onIonValueChange"?: (event: IonRadioGroupCustomEvent<any>) => void;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface IntrinsicElements {
        "ion-radio": IonRadio;
        "ion-radio-group": IonRadioGroup;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ion-radio": LocalJSX.IonRadio & JSXBase.HTMLAttributes<HTMLIonRadioElement>;
            "ion-radio-group": LocalJSX.IonRadioGroup & JSXBase.HTMLAttributes<HTMLIonRadioGroupElement>;
        }
    }
}
